import Foundation

struct Point {
    // (x,y)
    let x: Double
    let y: Double

    // mÃ©todo calculo de distancia entre dois pontos
    func distance(from point: Point) -> Double {
        let result = sqrt(pow(point.x - self.x, 2) + pow(point.y - self.y, 2))
        return result.roudTo(places: 2)
    }
}

struct Triangle {
    enum Kind {
        case equilateral
        case isosceles
        case scalene
    }
    
    let vertex1: Point
    let vertex2: Point
    let vertex3: Point
    
    // (vertex1, vertex2, vertex3) stored properties
    // kind -> enumerador (equilateral, isosceles, scalene)
    var kind: Kind {
        let ab = vertex1.distance(from: vertex2)
        let ac = vertex1.distance(from: vertex3)
        let bc = vertex2.distance(from: vertex3)
        
        if ab == ac && ab == bc {
            return .equilateral
        } else if ab == ac || ab == bc {
            return .isosceles
        } else {
            return .scalene
        }
    }
}

extension Double {
    func roudTo(places: Int) -> Double {
        let divisor = pow(10.0, Double(places))
        return (self * divisor).rounded() / divisor
    }
}

let t1 = Triangle(vertex1: Point(x: 2, y: 7), vertex2: Point(x: 2, y: 3), vertex3: Point(x: 5, y: 3))
let t2 = Triangle(vertex1: Point(x: 2, y: 3), vertex2: Point(x: 2, y: 1), vertex3: Point(x: 4, y: 3))
let t3 = Triangle(vertex1: Point(x: 5, y: 7), vertex2: Point(x: 10, y: 9), vertex3: Point(x: 5.768, y: 12.33))

print("Tipo do triangulo 1: \(t1.kind)")
print("Tipo do triangulo 1: \(t1.kind)")
print("Tipo do triangulo 1: \(t1.kind)")
